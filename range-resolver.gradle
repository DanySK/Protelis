def splitRange(def version) {
	return version.replace(" ","").split(",")
}
def minVersion(def version) {
	def versions = splitRange(version)
	if (versions.length > 1) {
		return versions[0].substring(1)
	}
	return versions[0]
}
def maxVersion(def version) {
	def versions = splitRange(version)
	if (versions.length > 1) {
		return versions[1].substring(0, versions[1].length() - 1)
	}
	return versions[0]
}
def minInclusive(def version) {
	return !version.startsWith("(") && !version.startsWith("]") 
}
def maxInclusive(def version) {
	return !version.endsWith(")") && !version.endsWith("[") 
}
def convertToNumber(def n) {
	try {
		return Integer.parseInt(n)
	} catch (NumberFormatException e) {
		return -1
	}
}
def higherVersion(def v1, def v2) {
	/*
	 * Look at version numbers. If one version is not a number,
	 * then the numbered version has priority (e.g. 2.7 > 2.7-rc0).
	 * If none is a number, fall back to lexicographical comparison.
	 * 2 > 1
	 * 2.0 > 2.0-r1
	 * 2.0-rc2 > 2.0-rc1
	 * A > B
	 * 1.0-rc1 > r02
	 * 1.r02 > 1.0r02
	 * 1.0.0 > 1.0
	 * In case of equality, returns true.
	 */
	 if (v1 == v2) {
	 	return true
	 }
	 def v1parts = v1.split("\\.")
	 def v2parts = v2.split("\\.")
	 for (i in 0..Math.min(v1parts.length, v2parts.length) - 1) {
	 	if (v1parts[i] != v2parts[i]) {
		    def p1 = convertToNumber(v1parts[i])
		    def p2 = convertToNumber(v2parts[i])
		    if (p1 > p2) {
		    	return true
		    }
		    if (p2 > p1) {
		    	return false
		    }
		    /*
		     * They are different Strings, fall back to lexicographical comparison
		     */
		    return v1 >= v2
	 	}
	 }
	 return v1 >= v2
}
def getMaxMin(def v1, def v2) {
	if (higherVersion(minVersion(v1), minVersion(v2))) {
		return [minVersion(v1), minInclusive(v1)]
	}
	return [minVersion(v2), minInclusive(v2)]
}
def getMinMax(def v1, def v2) {
	if(maxVersion(v1).isEmpty()) {
		return [maxVersion(v2), maxInclusive(v2)]
	}
	if(maxVersion(v2).isEmpty()) {
		return [maxVersion(v1), maxInclusive(v1)]
	}
	if (maxVersion(v1) < maxVersion(v2)) {
		return [maxVersion(v1), maxInclusive(v1)]
	}
	return [maxVersion(v2), maxInclusive(v2)]
}
def resolveConflict(def v1, def v2) {
	def maxmin = getMaxMin(v1, v2)
	def minmax = getMinMax(v1, v2)
	if (higherVersion(maxmin[0], minmax[0])) {
		/*
		 * Either there is a single compatible version, or there is a conflict.
		 * In case of conflict, the resolution strategy is to force the minimum
		 * compatible version with the artifact that is most restrictive. The hope
		 * is that the other artifact can work with that version.
		 */
		return maxmin[0]
	}
	return (maxmin[1] ? "[" : "(") + maxmin[0] + ", " + minmax[0] + (minmax[1] ? "]" : "[")
}

configurations.all {
  	resolutionStrategy {
	    /*
	     * This super-fantastic code implements the Holy Grail in Gradle:
	     * it restricts the version ranges transitively.
	     */
	    def substitutions = [
	    	'asm:asm':[Integer.toString(Integer.MAX_VALUE), 'org.ow2.asm:asm', '5.0.+'],
	    	'com.google.guava:guava':["14.0.1",'com.google.guava:guava-jdk5', '14.0.1']
	    ]
	    def depMap = [:]
	    eachDependency {
	    	DependencyResolveDetails details ->
	    		/*
	    		 * Apply substitutions
	    		 */
	    		def req = details.requested
	    		def depId = req.group + ":" + req.name
	    		if (substitutions.containsKey(depId)) {
		    		println depId + " is in the substitution list"
					def conversion = substitutions.get(depId)
					def version = conversion[0]
					def reqversion = maxVersion(req.version)
					if (higherVersion(version, reqversion)) {
			    		println depId + " must be substituted:" + reqversion + " is lower than " + version
						depId = conversion[1]
						version = conversion[2]
						def substitution = depId + ":" + version
						details.useTarget(substitution)
						println "new depId: " + depId
					}
	    		}
	    		if (depMap.containsKey(depId)) {
	    			/*
	    			 * Possible version conflict
	    			 */
	    			def detailsList = depMap.get(depId)
	    			detailsList << details
	    			def previousVersion = detailsList[0].requested.version
	    			def newVersion = req.version
	    			if(!(previousVersion == newVersion)) {
				    	def selectedVersion = resolveConflict(previousVersion, newVersion)
				    	println "transitive dependency resolution: " + depId + " " + previousVersion + " vs. " + newVersion + ". Selected: " + selectedVersion
						detailsList.each { det ->
							det.useVersion(selectedVersion)
						}
	    			}
	    		} else {
	    			depMap.put(depId, [details])
	    		}
	    }
    }
}