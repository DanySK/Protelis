apply plugin: 'project-report'
subprojects {
    apply plugin: 'java-library'
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.danilopianini:build-commons:${buildCommonsVersion}"
        classpath "org.danilopianini:javadoc.io-linker:${javadocIOLinkerVersion}"
        classpath "com.gradle:build-scan-plugin:${buildScanPluginVersion}"
    }
}

allprojects {
    apply plugin: 'org.danilopianini.build-commons'

    configurations {
        all*.exclude group: 'org.ow2.asm', module: 'asm-debug-all'
        all*.exclude group: 'asm', module: 'asm'
    }

    dependencies {
        implementation "org.apache.commons:commons-math3:$math3Version"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation "junit:junit:$junitVersion"
        testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        doclet "org.jboss.apiviz:apiviz:$apivizVersion"
    }

    publishing.publications {
        main(MavenPublication) {
            pom {
                developers {
                    developer {
                        name = 'Danilo Pianini'
                        email = 'danilo.pianini@unibo.it'
                        url = 'http://www.danilopianini.org'
                    }
                    developer {
                        name = 'Jacob Beal'
                        email = 'jakebeal@gmail.com'
                        url = 'http://web.mit.edu/jakebeal/www/'
                    }
                    developer {
                        name = 'Matteo Francia'
                        email = 'matteo.francia2@studio.unibo.it'
                        url = 'https://github.com/w4bo'
                    }
                }
                contributors {
                    contributor {
                        name = 'Mirko Viroli'
                        email = 'mirko.viroli@unibo.it'
                        url = 'http://mirkoviroli.apice.unibo.it/'
                    }
                    contributor {
                        name = 'Kyle Usbeck'
                        email = 'kusbeck@bbn.com'
                        url = 'https://dist-systems.bbn.com/people/kusbeck/'
                    }
                }
            }
        }
    }
}

subprojects.each { subproject -> rootProject.evaluationDependsOn(subproject.path)}
/*
 * Remove tasks that should not exist in subprojects
 */
subprojects.each { it.tasks.remove(wrapper) }

/*
 * Running a task on the parent project implies running the same task first on any subproject
 */
tasks.each { task ->
    subprojects.each { subproject ->
        def subtask = subproject.tasks.findByPath("${task.name}")
        if (subtask != null) {
            task.dependsOn(subtask)
        }
    }
}

dependencies {
    compile subprojects.findAll {
        !it.name.contains('test')
    }
}

javadoc {
    dependsOn subprojects.javadoc
    source subprojects.javadoc.source
}

task fatJar(type: Jar) {
    baseName = project.name + '-redist'
    baseName = "${rootProject.name}-redist"
    zip64 = true
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/"
        exclude "ant_tasks/"
        exclude "about_files/"
        exclude "help/about/"
        exclude 'build'
        exclude '.gradle'
        exclude 'build.gradle'
        exclude 'gradle'
        exclude 'gradlew'
        exclude 'gradlew.bat'
    }
    with jar
}

allprojects {
    def jdocTasks = ['javadoc', 'uploadArchives', 'projectReport', 'buildDashboard', 'javadocJar']
    def selectedTasks = gradle.startParameter.taskNames ?: defaultTasks
    if (!selectedTasks.disjoint(jdocTasks)) {
        apply plugin: 'org.danilopianini.javadoc.io-linker'
    }
}

apply plugin: com.gradle.scan.plugin.BuildScanPlugin
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

defaultTasks 'clean', 'build', 'check', 'javadoc', 'projectReport', 'buildDashboard', 'fatJar', 'signMainPublication'
