apply plugin: 'project-report'
subprojects {
    apply plugin: 'java-library'
}

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.danilopianini:build-commons:${buildCommonsVersion}"
        classpath "org.danilopianini:javadoc.io-linker:${javadocIOLinkerVersion}"
        classpath "com.gradle:build-scan-plugin:${buildScanPluginVersion}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

ext {
    isJava7Legacy = project.hasProperty("java7Legacy") || System.env.JAVA7LEGACY == "true"
    if (isJava7Legacy) {
        println("This build will generate the *LEGACY*, Java-7 compatible, build of Protelis")
    }
}

allprojects {
    if (isJava7Legacy) {
        def isBeta = project.version.endsWith('-beta')
        project.version = project.version - "-beta" + "-j7" + (isBeta? '-beta' : '')
    }

    apply plugin: 'org.danilopianini.build-commons'

    jacoco {
        toolVersion = jacocoVersion
    }
    configurations {
        all*.exclude group: 'org.ow2.asm', module: 'asm-debug-all'
        all*.exclude group: 'asm', module: 'asm'
    }

    dependencies {
        implementation "org.apache.commons:commons-math3:$math3Version"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation "junit:junit:$junitVersion"
        testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        doclet "org.jboss.apiviz:apiviz:$apivizVersion"
    }

    publishing.publications {
        main(MavenPublication) {
            pom {
                developers {
                    developer {
                        name = 'Danilo Pianini'
                        email = 'danilo.pianini@unibo.it'
                        url = 'http://www.danilopianini.org'
                    }
                    developer {
                        name = 'Jacob Beal'
                        email = 'jakebeal@gmail.com'
                        url = 'http://web.mit.edu/jakebeal/www/'
                    }
                    developer {
                        name = 'Matteo Francia'
                        email = 'matteo.francia2@studio.unibo.it'
                        url = 'https://github.com/w4bo'
                    }
                }
                contributors {
                    contributor {
                        name = 'Mirko Viroli'
                        email = 'mirko.viroli@unibo.it'
                        url = 'http://mirkoviroli.apice.unibo.it/'
                    }
                    contributor {
                        name = 'Kyle Usbeck'
                        email = 'kusbeck@bbn.com'
                        url = 'https://dist-systems.bbn.com/people/kusbeck/'
                    }
                }
            }
        }
    }
    /*
     * Use Bintray for beta releases
     */
    apply plugin: 'com.jfrog.bintray'
    def apiKeyName = 'BINTRAY_API_KEY'
    def userKeyName = 'BINTRAY_USER'
    bintray {
        user = System.env[userKeyName]
        key = System.env[apiKeyName]
        override = true
        publications = ['main']
        pkg {
            repo = 'Protelis'
            name = project.name
            userOrg = 'protelis'
            vcsUrl = "$scmRootUrl/$scmRepoName"
            licenses = ['GPL-3.0-or-later']
            version {
                name = project.version
            }
        }
    }
    bintrayUpload.onlyIf {
        def hasKey = System.env[apiKeyName] != null;
        def hasUser = System.env[userKeyName] != null
        if (!hasKey) {
            println("The $apiKeyName environment variable must be set in order for the bintray deployment to work")
        }
        if (!hasUser) {
            println("The $userKeyName environment variable must be set in order for the bintray deployment to work")
        }
        return hasKey && hasUser
    }
}

subprojects.each { subproject -> rootProject.evaluationDependsOn(subproject.path)}
/*
 * Remove tasks that should not exist in subprojects
 */
subprojects.each { it.tasks.remove(wrapper) }

/*
 * Running a task on the parent project implies running the same task first on any subproject
 */
tasks.each { task ->
    subprojects.each { subproject ->
        def subtask = subproject.tasks.findByPath("${task.name}")
        if (subtask != null) {
            task.dependsOn(subtask)
        }
    }
}

dependencies {
    compile subprojects.findAll {
        !it.name.contains('test')
    }
}

javadoc {
    dependsOn subprojects.javadoc
    source subprojects.javadoc.source
}

task fatJar(type: Jar) {
    baseName = "${rootProject.artifactId}-redist"
    zip64 = true
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/"
        exclude "ant_tasks/"
        exclude "about_files/"
        exclude "help/about/"
        exclude 'build'
        exclude '.gradle'
        exclude 'build.gradle'
        exclude 'gradle'
        exclude 'gradlew'
        exclude 'gradlew.bat'
    }
    with jar
}

allprojects {
    def jdocTasks = ['javadoc', 'uploadArchives', 'projectReport', 'buildDashboard', 'javadocJar']
    def selectedTasks = gradle.startParameter.taskNames ?: defaultTasks
    if (!selectedTasks.disjoint(jdocTasks)) {
        apply plugin: 'org.danilopianini.javadoc.io-linker'
    }
}

apply plugin: com.gradle.scan.plugin.BuildScanPlugin
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

defaultTasks 'clean', 'build', 'check', 'javadoc', 'projectReport', 'buildDashboard', 'fatJar', 'signMainPublication'
