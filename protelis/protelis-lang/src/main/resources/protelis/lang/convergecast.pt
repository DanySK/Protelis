module protelis:lang:convergecast

/*
 * Find the parent node following the maximum decrease in potential
 */
def findParent(potential) {
	mux(minHood(nbr(potential)) < potential) {
        // If the minimum-received potential is less then the potential of this node...
		let closest = minHood(nbr([potential, self]));
		if(closest.size() > 1) {
		    // ... return the node representing such potential (if exists)
			closest.get(1)
		} else {
			-1
		}
	} else {
		NaN
	}
}

/*
 * Concentrate a potential estimated according to the given HoodOp function
 * potential: feature with respect to the HoodOp is evaluated
 * accumulate: HoodOp to apply. all, any, max, min, sum, union, ...
 * local: local value of the feature
 * null: expression that will be evaluated if the field is empty
 */
 
 // solo sorgenti puntiformi
public def C(potential, accumulate, local, null) {
	rep(v <- local) {
		accumulate.apply(local,
			/*
			 * TODO: switch to accumulateHood
			 */
			hood(
			    // HoodOp
				(a, b) -> {accumulate.apply(a, b)},
				// expression that will be evaluated if the field is empty
				null,
				// argument to evaluate (must return a Field)
				mux(nbr(findParent(potential)) == self) { nbr(v) } else { null }
			)
		)
	}	
}